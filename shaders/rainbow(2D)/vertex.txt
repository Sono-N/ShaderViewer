attribute vec3 position;
attribute vec3 normal;
attribute vec4 color;
attribute vec2 texture_coordinates;
      
uniform mat4 mvpMatrix;
uniform mat4 invMatrix;
uniform vec3 lightDirection;
uniform vec3 eyeDirection;
uniform bool back;

varying vec4 vColor;
varying vec4 vShade;
varying vec3 vNormal;
varying vec2 vTextureCoordinates;

void main(void){
  if(!back){
    vec3 invLight = normalize(invMatrix * vec4(lightDirection, 0.0)).xyz;
    vec3 invEye = normalize(invMatrix * vec4(eyeDirection, 0.0)).xyz;
    vec3 halfLE = normalize(invLight + invEye);
    float diffuse = clamp(dot(normal, invLight), 0.0, 1.0);
    float specular = pow(clamp(dot(normal, halfLE), 0.0, 1.0), 50.0);
    vShade = vec4(vec3(diffuse), 1.0) + vec4(vec3(specular), 1.0);
    vColor = vColor;
    vTextureCoordinates = texture_coordinates;
    gl_Position = mvpMatrix * vec4(position, 1.0);
  }else{
    vColor = color;
    vNormal = normal;
    gl_Position = mvpMatrix * vec4(position, 1.0);
  }
}