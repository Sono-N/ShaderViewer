attribute vec3 position;
attribute vec3 normal;
attribute vec4 color;
attribute vec2 texture_coordinates;
      
uniform mat4 mvpMatrix;
uniform mat4 mMatrix;
uniform mat4 invMatrix;
uniform vec3 lightDirection;
uniform vec3 eyeDirection;
uniform bool back;

varying vec4 vColor;
varying vec3 vNormal;
varying vec3 vView;
varying vec3 vLight;
varying vec2 vTextureCoordinates;

void main(void){
  if(!back){
    vec3 invLight = normalize(invMatrix * vec4(lightDirection, 0.0)).xyz;
    vec3 light = invLight;
    vec3 invEye = normalize(invMatrix * vec4(eyeDirection, 0.0)).xyz;
    vec3 eye = invEye;
    vec3 n = normalize(normal);
    vec3 t = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
    vec3 b = cross(n, t);
    vView.x = dot(t, eye);
    vView.y = dot(b, eye);
    vView.z = dot(n, eye);
    vView = normalize(vView);
    vLight.x = dot(t, light);
    vLight.y = dot(b, light);
    vLight.z = dot(n, light);
    vLight = normalize(vLight);    
    vColor = color;
    vTextureCoordinates = texture_coordinates;
    gl_Position = mvpMatrix * vec4(position, 1.0);
  }else{
    vColor = color;
    vNormal = normal;
    gl_Position = mvpMatrix * vec4(position, 1.0);
  }
}